{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["StartsDispaly","props","utils","range","count","map","starId","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","PlayAgain","gameStatus","color","Game","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidaiteNums","secondsLeft","setSecondsLeft","useEffect","length","setTimeout","toFixed","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidateAreWrong","onNumberClick","currentStatus","concat","cn","startNewGame","numId","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","StarMatch","gameId","setGameId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAGMA,EAAgB,SAAAC,GAAK,OACzB,mCACGC,EAAMC,MAAM,EAAGF,EAAMG,OAAOC,KAAI,SAAAC,GAAM,OACrC,qBAAwBC,UAAU,QAAxBN,EAAMK,cAIhBE,EAAa,SAACP,GAAD,OACjB,wBACEM,UAAU,SACVE,MAAO,CAAEC,gBAAiBC,EAAOV,EAAMW,SACvCC,QAAS,kBAAMZ,EAAMY,QAAQZ,EAAMa,OAAQb,EAAMW,SAHnD,SAKGX,EAAMa,UAILC,EAAY,SAAAd,GAAK,OACrB,sBAAKM,UAAU,YAAf,UACE,qBACEA,UAAS,kBAAkC,SAArBN,EAAMe,YAAwB,WACpDP,MAAO,CAAEQ,MAA4B,SAArBhB,EAAMe,WAAwB,MAAQ,SAFxD,SAIwB,SAArBf,EAAMe,WAAwB,WAAa,SAE9C,wBAAQH,QAASZ,EAAMY,QAAvB,4BAmCEK,EAAO,SAACjB,GACZ,MAhCmB,WACnB,MAA0BkB,mBAASjB,EAAMkB,OAAO,EAAE,IAAlD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0CH,mBAASjB,EAAMC,MAAM,EAAE,IAAjE,mBAAOoB,EAAP,KAAsBC,EAAtB,KACA,EAA2CL,mBAAS,IAApD,mBAAOM,EAAP,KAAsBC,EAAtB,KACA,EAAsCP,mBAAS,IAA/C,mBAAOQ,EAAP,KAAoBC,EAApB,KAwBA,OAtBAC,qBAAU,WACLF,EAAc,GAAKJ,EAAcO,OAAS,GAC3BC,YAAW,WACxBH,GAAgBD,EAAc,IAAKK,QAAQ,MAC1C,QAkBD,CAAEX,QAAOE,gBAAeE,gBAAeE,cAAaM,aAbtC,SAACC,GACrB,GAAGhC,EAAMiC,IAAID,KAAsBb,EAChCK,EAAkBQ,OACb,CACL,IAAME,EAAmBb,EAAcc,QACrC,SAAAC,GAAC,OAAKJ,EAAiBK,SAASD,MAElChB,EAASpB,EAAMsC,YAAYJ,EAAkB,IAC7CZ,EAAiBY,GACjBV,EAAkB,OAclBe,GALFpB,EADF,EACEA,MACAE,EAFF,EAEEA,cACAE,EAHF,EAGEA,cACAE,EAJF,EAIEA,YACAM,EALF,EAKEA,aAGIS,EAAoBxC,EAAMiC,IAAIV,GAAiBJ,EAC/CL,EAAsC,IAAzBO,EAAcO,OAC7B,MACAH,GAAe,EAAM,OAAS,SAY5BgB,EAAgB,SAAC7B,EAAQ8B,GAC7B,GAAiB,UAAd5B,GAA2C,QAAjB4B,EAA7B,CAGA,IAAMV,EACc,cAAlBU,EACEnB,EAAcoB,OAAO/B,GACrBW,EAAcY,QAAO,SAAAS,GAAE,OAAIA,IAAOhC,KAEtCmB,EAAaC,KAGf,OACE,sBAAK3B,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,oEAGA,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,SACiB,UAAdS,EACG,cAAC,EAAD,CAAWH,QAASZ,EAAM8C,aAAc/B,WAAYA,IACpD,cAAC,EAAD,CAAeZ,MAAOiB,MAE5B,qBAAKd,UAAU,QAAf,SACGL,EAAMC,MAAM,EAAE,GAAGE,KAAI,SAAA2C,GAAK,OACzB,cAAC,EAAD,CAEEpC,QArCUE,EAqCWkC,EApC3BzB,EAAcgB,SAASzB,GAGxBW,EAAcc,SAASzB,GACjB4B,EAAoB,QAAU,YAEhC,YALE,QAoCC5B,OAAQkC,EACRnC,QAAS8B,GAHJK,GApCI,IAAClC,UA4ClB,sBAAKP,UAAU,QAAf,6BAAwCoB,SAWxChB,EAAS,CACbsC,UAAW,YACXC,KAAM,aACNC,MAAO,aACPC,UAAW,eAIPlD,EAAQ,CAEZiC,IAAK,SAAAkB,GAAG,OAAIA,EAAIC,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,IAGlDrD,MAAO,SAACsD,EAAKC,GAAN,OAAcC,MAAMC,KAAK,CAAE9B,OAAQ4B,EAAMD,EAAM,IAAK,SAACI,EAAGC,GAAJ,OAAUL,EAAMK,MAG3E1C,OAAQ,SAACqC,EAAKC,GAAN,OAAcD,EAAMM,KAAKC,MAAMD,KAAK3C,UAAYsC,EAAMD,EAAM,KAIpEjB,YAAa,SAACa,EAAKK,GAGjB,IAFA,IAAMO,EAAO,CAAC,IACRC,EAAO,GACJJ,EAAI,EAAGA,EAAIT,EAAIvB,OAAQgC,IAC9B,IAAK,IAAIK,EAAI,EAAGC,EAAMH,EAAKnC,OAAQqC,EAAIC,EAAKD,IAAK,CAC/C,IAAME,EAAeJ,EAAKE,GAAGtB,OAAOQ,EAAIS,IAClCQ,EAAepE,EAAMiC,IAAIkC,GAC3BC,GAAgBZ,IAClBO,EAAKM,KAAKF,GACVH,EAAKK,KAAKD,IAIhB,OAAOJ,EAAKhE,EAAMkB,OAAO,EAAG8C,EAAKpC,OAAS,MAI/B0C,EA3CG,WAChB,MAA4BrD,mBAAS,GAArC,mBAAOsD,EAAP,KAAeC,EAAf,KACA,OAAO,cAAC,EAAD,CAAmB3B,aAAc,kBAAM2B,EAAUD,EAAO,KAA7CA,ICpHLE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0322e1a3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nconst StartsDispaly = props => (\n  <>\n    {utils.range(1, props.count).map(starId => \n      <div key={props.starId} className=\"star\" />\n    )}\n  </>\n);\nconst PlayNumber = (props) => (\n  <button \n    className=\"number\"\n    style={{ backgroundColor: colors[props.status]}}\n    onClick={() => props.onClick(props.number, props.status)}\n  >\n    {props.number}\n  </button>\n);\n\nconst PlayAgain = props => (\n  <div className=\"game-done\">\n    <div \n      className={`message ${props.gameStatus !== 'lost'&& \"gamewon\"}`}\n      style={{ color: props.gameStatus === 'lost' ? 'red' : 'green' }}\n    >\n      {props.gameStatus === 'lost' ? 'GameOver' : 'Nice'}\n    </div>\n    <button onClick={props.onClick}>Play Again</button>\n  </div>\n);\n\nconst useGameState = () => {\n  const [stars, setStars] = useState(utils.random(1,9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1,9));\n  const [candidateNums, setCandidaiteNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10.0);\n  \n  useEffect(() => {\n    if(secondsLeft > 0 && availableNums.length > 0){\n       const timeId = setTimeout(()=>{\n         setSecondsLeft((secondsLeft - 0.1).toFixed(2));\n       }, 100);\n      // return () => clearTimeout(timeId)\n    }\n  });\n  \n  const setGameState = (newCandidateNums) => {\n   if(utils.sum(newCandidateNums) !== stars){\n      setCandidaiteNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidaiteNums([]);\n    } \n  }\n  \n  return { stars, availableNums, candidateNums, secondsLeft, setGameState};\n}\n\nconst Game = (props) => {\n  const { \n    stars, \n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useGameState();\n  \n  const candidateAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 \n    ? 'won' \n    : secondsLeft <= 0.0 ? 'lost' : 'active';\n  \n  const numberStatus = (number) => {\n    if(!availableNums.includes(number)){\n      return 'used';\n    }\n    if(candidateNums.includes(number)){\n      return candidateAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  };\n  \n  const onNumberClick = (number, currentStatus) => {\n    if(gameStatus != 'active' || currentStatus == 'used'){\n      return;\n    }\n    const newCandidateNums = \n      currentStatus === 'available'\n      ? candidateNums.concat(number)\n      : candidateNums.filter(cn => cn !== number);\n    \n    setGameState(newCandidateNums);\n  }\n  \n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus != 'active' \n            ? <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/> \n            : <StartsDispaly count={stars}/>}\n        </div>\n        <div className=\"right\">\n          {utils.range(1,9).map(numId => \n            <PlayNumber \n              key={numId} \n              status={numberStatus(numId)}\n              number={numId}\n              onClick={onNumberClick}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n    </div>\n  );\n};\n\nconst StarMatch = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId+1)}/>;\n}\n\n// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue',\n};\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\nexport default StarMatch;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}