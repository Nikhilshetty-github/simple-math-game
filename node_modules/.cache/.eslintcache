[{"/Users/nikhilshetty/simple-maths-game/src/index.js":"1","/Users/nikhilshetty/simple-maths-game/src/App.js":"2","/Users/nikhilshetty/simple-maths-game/src/reportWebVitals.js":"3","/Users/nikhilshetty/Downloads/simple-math-game/src/index.js":"4","/Users/nikhilshetty/Downloads/simple-math-game/src/App.js":"5","/Users/nikhilshetty/Downloads/simple-math-game/src/reportWebVitals.js":"6"},{"size":500,"mtime":1633025044138,"results":"7","hashOfConfig":"8"},{"size":4663,"mtime":1633028165597,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1633025044140,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":1633025044138,"results":"11","hashOfConfig":"12"},{"size":4663,"mtime":1633028165597,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1633025044140,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jreq16",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5zjcs3",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nikhilshetty/simple-maths-game/src/index.js",[],"/Users/nikhilshetty/simple-maths-game/src/App.js",["28","29","30","31"],"/Users/nikhilshetty/simple-maths-game/src/reportWebVitals.js",[],"/Users/nikhilshetty/Downloads/simple-math-game/src/index.js",[],"/Users/nikhilshetty/Downloads/simple-math-game/src/App.js",["32","33","34","35"],"import { useEffect, useState } from 'react';\nimport './App.css';\n\nconst StartsDispaly = props => (\n  <>\n    {utils.range(1, props.count).map(starId => \n      <div key={props.starId} className=\"star\" />\n    )}\n  </>\n);\nconst PlayNumber = (props) => (\n  <button \n    className=\"number\"\n    style={{ backgroundColor: colors[props.status]}}\n    onClick={() => props.onClick(props.number, props.status)}\n  >\n    {props.number}\n  </button>\n);\n\nconst PlayAgain = props => (\n  <div className=\"game-done\">\n    <div \n      className=\"message\"\n      style={{ color: props.gameStatus === 'lost' ? 'red' : 'green' }}\n    >\n      {props.gameStatus === 'lost' ? 'GameOver' : 'Nice'}\n    </div>\n    <button onClick={props.onClick}>Play Again</button>\n  </div>\n);\n\nconst useGameState = () => {\n  const [stars, setStars] = useState(utils.random(1,9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1,9));\n  const [candidateNums, setCandidaiteNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n  \n  useEffect(() => {\n    if(secondsLeft > 0 && availableNums.length > 0){\n       const timeId = setTimeout(()=>{\n         setSecondsLeft(secondsLeft - 1);\n       }, 1000);\n      // return () => clearTimeout(timeId)\n    }\n  });\n  \n  const setGameState = (newCandidateNums) => {\n   if(utils.sum(newCandidateNums) !== stars){\n      setCandidaiteNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidaiteNums([]);\n    } \n  }\n  \n  return { stars, availableNums, candidateNums, secondsLeft, setGameState};\n}\n\nconst Game = (props) => {\n  const { \n    stars, \n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useGameState();\n  \n  const candidateAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 \n    ? 'won' \n    : secondsLeft === 0 ? 'lost' : 'active';\n  \n  const numberStatus = (number) => {\n    if(!availableNums.includes(number)){\n      return 'used';\n    }\n    if(candidateNums.includes(number)){\n      return candidateAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  };\n  \n  const onNumberClick = (number, currentStatus) => {\n    if(gameStatus != 'active' || currentStatus == 'used'){\n      return;\n    }\n    const newCandidateNums = \n      currentStatus === 'available'\n      ? candidateNums.concat(number)\n      : candidateNums.filter(cn => cn !== number);\n    \n    setGameState(newCandidateNums);\n  }\n  \n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus != 'active' \n            ? <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/> \n            : <StartsDispaly count={stars}/>}\n        </div>\n        <div className=\"right\">\n          {utils.range(1,9).map(numId => \n            <PlayNumber \n              key={numId} \n              status={numberStatus(numId)}\n              number={numId}\n              onClick={onNumberClick}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n    </div>\n  );\n};\n\nconst StarMatch = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId+1)}/>;\n}\n\n// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue',\n};\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\nexport default StarMatch;\n","/Users/nikhilshetty/Downloads/simple-math-game/src/reportWebVitals.js",[],{"ruleId":"36","severity":1,"message":"37","line":41,"column":14,"nodeType":"38","messageId":"39","endLine":41,"endColumn":20},{"ruleId":"40","severity":1,"message":"41","line":89,"column":19,"nodeType":"42","messageId":"43","endLine":89,"endColumn":21},{"ruleId":"40","severity":1,"message":"44","line":89,"column":48,"nodeType":"42","messageId":"43","endLine":89,"endColumn":50},{"ruleId":"40","severity":1,"message":"41","line":107,"column":23,"nodeType":"42","messageId":"43","endLine":107,"endColumn":25},{"ruleId":"36","severity":1,"message":"37","line":41,"column":14,"nodeType":"38","messageId":"39","endLine":41,"endColumn":20},{"ruleId":"40","severity":1,"message":"41","line":89,"column":19,"nodeType":"42","messageId":"43","endLine":89,"endColumn":21},{"ruleId":"40","severity":1,"message":"44","line":89,"column":48,"nodeType":"42","messageId":"43","endLine":89,"endColumn":50},{"ruleId":"40","severity":1,"message":"41","line":107,"column":23,"nodeType":"42","messageId":"43","endLine":107,"endColumn":25},"no-unused-vars","'timeId' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='."]