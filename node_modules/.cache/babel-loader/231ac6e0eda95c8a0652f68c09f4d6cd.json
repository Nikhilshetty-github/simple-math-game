{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilshetty/simple-maths-game/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StartsDispaly = props => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: utils.range(1, props.count).map(starId => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"star\"\n  }, props.starId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 7\n  }, this))\n}, void 0, false);\n\n_c = StartsDispaly;\n\nconst PlayNumber = props => /*#__PURE__*/_jsxDEV(\"button\", {\n  className: \"number\",\n  style: {\n    backgroundColor: colors[props.status]\n  },\n  onClick: () => props.onClick(props.number, props.status),\n  children: props.number\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n\n_c2 = PlayNumber;\n\nconst PlayAgain = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-done\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message\",\n    style: {\n      color: props.gameStatus === 'lost' ? 'red' : 'green'\n    },\n    children: props.gameStatus === 'lost' ? 'GameOver' : 'Nice'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: props.onClick,\n    children: \"Play Again\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 3\n}, this);\n\n_c3 = PlayAgain;\n\nconst useGameState = () => {\n  _s();\n\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [candidateNums, setCandidaiteNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      const timeId = setTimeout(() => {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000); // return () => clearTimeout(timeId)\n    }\n  });\n\n  const setGameState = newCandidateNums => {\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidaiteNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(n => !newCandidateNums.includes(n));\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidaiteNums([]);\n    }\n  };\n\n  return {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  };\n};\n\n_s(useGameState, \"jzCR9Kyjpbl6uhiFuN7JbPwcPO8=\");\n\nconst Game = props => {\n  _s2();\n\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useGameState();\n  const candidateAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active';\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidateAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (gameStatus != 'active' || currentStatus == 'used') {\n      return;\n    }\n\n    const newCandidateNums = currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n    setGameState(newCandidateNums);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"help\",\n      children: \"Pick 1 or more numbers that sum to the number of stars\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left\",\n        children: gameStatus != 'active' ? /*#__PURE__*/_jsxDEV(PlayAgain, {\n          onClick: props.startNewGame,\n          gameStatus: gameStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(StartsDispaly, {\n          count: stars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right\",\n        children: utils.range(1, 9).map(numId => /*#__PURE__*/_jsxDEV(PlayNumber, {\n          status: numberStatus(numId),\n          number: numId,\n          onClick: onNumberClick\n        }, numId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [\"Time Remaining: \", secondsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Game, \"C++/p41M725y5uNUvBY5sdJtUjE=\", false, function () {\n  return [useGameState];\n});\n\n_c4 = Game;\n\nconst StarMatch = () => {\n  _s3();\n\n  const [gameId, setGameId] = useState(1);\n  return /*#__PURE__*/_jsxDEV(Game, {\n    startNewGame: () => setGameId(gameId + 1)\n  }, gameId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 10\n  }, this);\n}; // Color Theme\n\n\n_s3(StarMatch, \"NdxBUEh67UKnEQOsYqMda/Noysc=\");\n\n_c5 = StarMatch;\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n}; // ReactDOM.render(\n//   <StarMatch />, \n//   mountNode\n// );\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1>Welcome Nikhil Shetty.</h1>\n//     </div>\n//   );\n// }\n\nexport default StarMatch;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StartsDispaly\");\n$RefreshReg$(_c2, \"PlayNumber\");\n$RefreshReg$(_c3, \"PlayAgain\");\n$RefreshReg$(_c4, \"Game\");\n$RefreshReg$(_c5, \"StarMatch\");","map":{"version":3,"sources":["/Users/nikhilshetty/simple-maths-game/src/App.js"],"names":["StartsDispaly","props","utils","range","count","map","starId","PlayNumber","backgroundColor","colors","status","onClick","number","PlayAgain","color","gameStatus","useGameState","stars","setStars","useState","random","availableNums","setAvailableNums","candidateNums","setCandidaiteNums","secondsLeft","setSecondsLeft","useEffect","length","timeId","setTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","Game","candidateAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","numId","StarMatch","gameId","setGameId","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push"],"mappings":"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","sourcesContent":["import './App.css';\n\nconst StartsDispaly = props => (\n  <>\n    {utils.range(1, props.count).map(starId => \n      <div key={props.starId} className=\"star\" />\n    )}\n  </>\n);\nconst PlayNumber = (props) => (\n  <button \n    className=\"number\"\n    style={{ backgroundColor: colors[props.status]}}\n    onClick={() => props.onClick(props.number, props.status)}\n  >\n    {props.number}\n  </button>\n);\n\nconst PlayAgain = props => (\n  <div className=\"game-done\">\n    <div \n      className=\"message\"\n      style={{ color: props.gameStatus === 'lost' ? 'red' : 'green' }}\n    >\n      {props.gameStatus === 'lost' ? 'GameOver' : 'Nice'}\n    </div>\n    <button onClick={props.onClick}>Play Again</button>\n  </div>\n);\n\nconst useGameState = () => {\n  const [stars, setStars] = useState(utils.random(1,9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1,9));\n  const [candidateNums, setCandidaiteNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n  \n  useEffect(() => {\n    if(secondsLeft > 0 && availableNums.length > 0){\n       const timeId = setTimeout(()=>{\n         setSecondsLeft(secondsLeft - 1);\n       }, 1000);\n      // return () => clearTimeout(timeId)\n    }\n  });\n  \n  const setGameState = (newCandidateNums) => {\n   if(utils.sum(newCandidateNums) !== stars){\n      setCandidaiteNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidaiteNums([]);\n    } \n  }\n  \n  return { stars, availableNums, candidateNums, secondsLeft, setGameState};\n}\n\nconst Game = (props) => {\n  const { \n    stars, \n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useGameState();\n  \n  const candidateAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 \n    ? 'won' \n    : secondsLeft === 0 ? 'lost' : 'active';\n  \n  const numberStatus = (number) => {\n    if(!availableNums.includes(number)){\n      return 'used';\n    }\n    if(candidateNums.includes(number)){\n      return candidateAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  };\n  \n  const onNumberClick = (number, currentStatus) => {\n    if(gameStatus != 'active' || currentStatus == 'used'){\n      return;\n    }\n    const newCandidateNums = \n      currentStatus === 'available'\n      ? candidateNums.concat(number)\n      : candidateNums.filter(cn => cn !== number);\n    \n    setGameState(newCandidateNums);\n  }\n  \n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus != 'active' \n            ? <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/> \n            : <StartsDispaly count={stars}/>}\n        </div>\n        <div className=\"right\">\n          {utils.range(1,9).map(numId => \n            <PlayNumber \n              key={numId} \n              status={numberStatus(numId)}\n              number={numId}\n              onClick={onNumberClick}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n    </div>\n  );\n};\n\nconst StarMatch = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId+1)}/>;\n}\n\n// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue',\n};\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\n// ReactDOM.render(\n//   <StarMatch />, \n//   mountNode\n// );\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1>Welcome Nikhil Shetty.</h1>\n//     </div>\n//   );\n// }\n\nexport default StarMatch;\n"]},"metadata":{},"sourceType":"module"}